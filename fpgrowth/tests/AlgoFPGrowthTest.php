<?php
/**
 * 2007-2016 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@prestashop.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
 * versions in the future. If you wish to customize PrestaShop for your
 * needs please refer to http://www.prestashop.com for more information.
 *
 * @author Jesus Gazol <jgc3.1416@gmail.com>
 * @copyright  2007-2016 PrestaShop SA
 * @license    http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 *  International Registered Trademark & Property of PrestaShop SA
 */

require_once("../AlgoFPGrowth.php");

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-01 at 12:42:07.
 */
class AlgoFPGrowthTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var fpgrowth\AlgoFPGrowth
     */
    protected $object;

    private $filename;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new fpgrowth\AlgoFPGrowth;
        $this->filename = "sample.txt";
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers AlgoFPGrowth::runAlgorithm
     * @todo   Implement testRunAlgorithm().
     */
    public function testRunAlgorithm()
    {
        $transactionData = new \fpgrowth\TransactionFileGenerator($this->filename);
        $minSupport = 0.2;
        $patterns = $this->object->runAlgorithm($transactionData, $minSupport);
        $levels = $patterns->getLevels();
        $this->assertEquals($levels[3][0]->itemset, ['1', '2', '3']);

    }

    public function testScanDatabaseToDetermineFrequencyOfSingleItems()
    {
        $transactionData = new \fpgrowth\TransactionFileGenerator($this->filename);
        $mapSupport = $this->object->scanDatabaseToDetermineFrequencyOfSingleItems($transactionData);
        $expected = [
            '3' => 4,
            '4' => 3,
            '1' => 4,
            '2' => 4,
            '5' => 1
        ];
        $this->assertEquals($mapSupport, $expected);
    }

    public function testSortTransaction()
    {
        $testMap = [
            '3' => 4,
            '4' => 3,
            '1' => 4,
            '2' => 4,
            '5' => 1
        ];
        $transaction = ['5', '4', '1'];
        $this->object->sortTransaction($transaction, $testMap);
        $this->assertEquals($transaction, ['1', '4', '5']);
    }

    public function testOnePathFile()
    {

        $transactionData = new \fpgrowth\TransactionFileGenerator("sample_onepath.txt");
        $patterns = $this->object->runAlgorithm($transactionData, 0.2);
        $levels = $patterns->getLevels();
        $this->assertEquals($levels[3][0]->itemset, ['a', 'b', 'c']);

    }


}
